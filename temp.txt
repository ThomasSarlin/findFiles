==4368== Memcheck, a memory error detector
==4368== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4368== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==4368== Command: ./mfind -p 15 example .. hej.txt
==4368== Parent PID: 3231
==4368== 
==4368== error calling PR_SET_PTRACER, vgdb might block
==4368== Invalid write of size 8
==4368==    at 0x4E43482: list_del (list.h:56)
==4368==    by 0x4E43482: stack_list_del (allocatestack.c:140)
==4368==    by 0x4E43482: __deallocate_stack (allocatestack.c:799)
==4368==    by 0x4E43482: __free_tcb (pthread_create.c:367)
==4368==    by 0x4E44C55: __pthread_timedjoin_ex (pthread_join_common.c:106)
==4368==    by 0x1091DD: waitForThreads (mfind.c:104)
==4368==    by 0x108E44: main (mfind.c:27)
==4368==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==4368== 
==4368== 
==4368== Process terminating with default action of signal 11 (SIGSEGV)
==4368==  Access not within mapped region at address 0x8
==4368==    at 0x4E43482: list_del (list.h:56)
==4368==    by 0x4E43482: stack_list_del (allocatestack.c:140)
==4368==    by 0x4E43482: __deallocate_stack (allocatestack.c:799)
==4368==    by 0x4E43482: __free_tcb (pthread_create.c:367)
==4368==    by 0x4E44C55: __pthread_timedjoin_ex (pthread_join_common.c:106)
==4368==    by 0x1091DD: waitForThreads (mfind.c:104)
==4368==    by 0x108E44: main (mfind.c:27)
==4368==  If you believe this happened as a result of a stack
==4368==  overflow in your program's main thread (unlikely but
==4368==  possible), you can try to increase the size of the
==4368==  main thread stack using the --main-stacksize= flag.
==4368==  The main thread stack size used in this run was 8388608.
==4368== 
==4368== HEAP SUMMARY:
==4368==     in use at exit: 3,616 bytes in 16 blocks
==4368==   total heap usage: 24 allocs, 8 frees, 70,091 bytes allocated
==4368== 
==4368== LEAK SUMMARY:
==4368==    definitely lost: 0 bytes in 0 blocks
==4368==    indirectly lost: 0 bytes in 0 blocks
==4368==      possibly lost: 3,536 bytes in 13 blocks
==4368==    still reachable: 80 bytes in 3 blocks
==4368==         suppressed: 0 bytes in 0 blocks
==4368== Rerun with --leak-check=full to see details of leaked memory
==4368== 
==4368== For counts of detected and suppressed errors, rerun with: -v
==4368== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
